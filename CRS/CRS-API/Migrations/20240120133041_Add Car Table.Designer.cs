// <auto-generated />
using CRS_API.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRS_API.Migrations
{
    [DbContext(typeof(CRSDbContext))]
    [Migration("20240120133041_Add Car Table")]
    partial class AddCarTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRS_API.Models.Domain.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Mileage")
                        .HasColumnType("real");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassengerSeat")
                        .HasColumnType("int");

                    b.Property<int>("RentalPrice")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Availability = true,
                            Color = "Blue",
                            Condition = 0,
                            FuelType = 0,
                            Images = "ImageURL1",
                            LicensePlate = "ABC123",
                            Manufacturer = "Toyota",
                            Mileage = 30000f,
                            Model = "Camry",
                            PassengerSeat = 5,
                            RentalPrice = 2800,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = 2,
                            Availability = true,
                            Color = "Red",
                            Condition = 3,
                            FuelType = 0,
                            Images = "ImageURL2",
                            LicensePlate = "XYZ789",
                            Manufacturer = "Honda",
                            Mileage = 25000f,
                            Model = "Accord",
                            PassengerSeat = 4,
                            RentalPrice = 2000,
                            TransmissionType = 1
                        },
                        new
                        {
                            Id = 3,
                            Availability = true,
                            Color = "Silver",
                            Condition = 1,
                            FuelType = 0,
                            Images = "ImageURL3",
                            LicensePlate = "DEF456",
                            Manufacturer = "Ford",
                            Mileage = 40000f,
                            Model = "Fusion",
                            PassengerSeat = 5,
                            RentalPrice = 2500,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = 4,
                            Availability = true,
                            Color = "Black",
                            Condition = 0,
                            FuelType = 0,
                            Images = "ImageURL4",
                            LicensePlate = "GHI789",
                            Manufacturer = "Chevrolet",
                            Mileage = 35000f,
                            Model = "Malibu",
                            PassengerSeat = 4,
                            RentalPrice = 3000,
                            TransmissionType = 1
                        },
                        new
                        {
                            Id = 5,
                            Availability = true,
                            Color = "White",
                            Condition = 1,
                            FuelType = 2,
                            Images = "ImageURL5",
                            LicensePlate = "JKL012",
                            Manufacturer = "Tesla",
                            Mileage = 20000f,
                            Model = "Model 3",
                            PassengerSeat = 5,
                            RentalPrice = 4500,
                            TransmissionType = 0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
